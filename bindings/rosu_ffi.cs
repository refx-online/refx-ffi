// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using My.Company;
#pragma warning restore 0105

namespace My.Company
{
    public static partial class Interop
    {
        public const string NativeLib = "rosu_ffi";

        static Interop()
        {
        }


        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "calculate_score")]
        public static extern CalculatePerformanceResult calculate_score(ref sbyte beatmap_path, uint mode, ref sbyte mods, uint max_combo, double accuracy, uint miss_count, Optionu32 passed_objects, bool lazer);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl, EntryPoint = "calculate_score_bytes")]
        public static extern CalculatePerformanceResult calculate_score_bytes(ref byte beatmap_bytes, uint len, uint mode, uint mods, uint max_combo, double accuracy, uint miss_count, Optionu32 passed_objects, bool lazer);

    }

    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct CalculatePerformanceResult
    {
        public double pp;
        public double stars;
    }

    ///Option type containing boolean flag and maybe valid data.
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public partial struct Optionu32
    {
        ///Element that is maybe valid.
        uint t;
        ///Byte where `1` means element `t` is valid.
        byte is_some;
    }

    public partial struct Optionu32
    {
        public static Optionu32 FromNullable(uint? nullable)
        {
            var result = new Optionu32();
            if (nullable.HasValue)
            {
                result.is_some = 1;
                result.t = nullable.Value;
            }

            return result;
        }

        public uint? ToNullable()
        {
            return this.is_some == 1 ? this.t : (uint?)null;
        }
    }




    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
